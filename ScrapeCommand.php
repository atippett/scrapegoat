<?php
/**
 * This tool will take a list of urls, such as those generated by a backlinks tool.
 * Typically this is done for a competitive product (website) by getting backlinks using 3rd part tool.
 * These backlinks are then processed by this tool (they are the urls file list) in order to
 * extract all the emails on those links. These emails can be useful for marketing purposes (or other purposes
 *
 * Steps in the process
 *   1) Given the backlinks file of URLs
 *   2) Filter out url domains that are irrelevant using URL filters file
 *   3) Scrape urls to extract extract emails
 *   4) Filter out email domains that are irrelevant uring email filters file (example: wix.com emails)
 *   5) De-duplicate emails in list
 *   6) Output csv file that contains linked website and email extracted
 *
 * Various options exist:
 *   - Specify custom url domains filter file
 *   - Specify custom email domains filter file
 *   - Run the scrape only to generate the raw email list
 *   - Run the email filter only (to re-process a scraped list)
 *   - Do not apply a url domains filter
 *   - Do not apply an email domains filter
 */



/**
 * Helper to print a line
 *
 * @param string $output
 * @return void
 */
function printLine(string $output = null) {
  print("{$output}\n");
}

class ScrapeCommand {
  protected $argc;
  protected $argv;

  const SCRAPE_COMMAND = "./bin/scrape.darwin-amd-64 -w";
  const URLS_FILENAME_DEFAULT = 'run_scrape_urls.csv';
  const EMAILS_FILENAME_DEFAULT = 'run_scrape_emails.csv';
  const URL_FILTERS_FILENAME_DEFAULT = 'url_filters.txt';
  const EMAIL_FILTERS_FILENAME_DEFAULT = 'email_filters.txt';
  const OUTPUT_FILENAME_DEFAULT = 'run_scrape_output.csv';

  public $urlsFile;
  public $emailsFile;
  public $urlFiltersFile;
  public $emailFiltersFile;
  public $outputFile;

  public $urlsFileName = self::URLS_FILENAME_DEFAULT;
  public $emailsFileName = self::EMAILS_FILENAME_DEFAULT;
  public $urlFiltersFileName = self::URL_FILTERS_FILENAME_DEFAULT;
  public $emailFiltersFileName = self::EMAIL_FILTERS_FILENAME_DEFAULT;
  public $outputFileName = self::OUTPUT_FILENAME_DEFAULT;

  public $urlColumn = 1;
  public $isVerbose = false;
  public $isScrapeOnly = false;
  public $isEmailOnly = false;
  public $isNoUrlFilter = false;
  public $isNoEmailFilter = false;

  public function __construct($argc, $argv) {
    $this->argc = $argc;
    $this->argv = $argv;
  }

  /**
   * Initialize the scrape process
   *
   * @return void
   */
  public function initialize() {
    date_default_timezone_set('America/Los_Angeles');
    $this->parseCommandLine();
    $this->validateParams();
  }

  /**
   * Start the scrape process
   *
   * @return void
   */
  public function process() {
    $start = time();

    $this->logLine('Timezone = ' . date_default_timezone_get());
    $this->logLine('Processing starting');

    // $this->executeScrape();
    sleep(5);

    $this->logLine('Processing ending');
    $end = time();
    $total = ($end - $start) < 120 ? ($end - $start) . ' seconds' : intval(($end - $start) / 600) * 10 . ' minutes';
    $this->logLine("Execution time: {$total}");
  }


  /*
   * Helper Functions
   */

  /**
   * Helper to start the scrape
   *
   * @return void
   */
  protected function executeScrape() {
    $scrapeCommand = self::SCRAPE_COMMAND;

    // Execute the scraper with this URL
    exec("{$scrapeCommand} {$url}", $this->outputFile, $resultCode);
  }

  /**
   * Helper to validate command line params
   *
   * @return void
   */
  protected function validateParams() {
    // Check for mutually exclusive conditions
    if ($this->isScrapeOnly && $this->isEmailOnly) {
      $this->logErrorLine('Cannot set scrapeOnly and emailOnly options at the same time');
      $this->cleanupAndDie();
    }

    // No need to filer urls
    if ($this->isNoUrlFilter || $this->isEmailOnly) {
      $this->urlFiltersFileName = null;
    }

    // No need to filter emails
    if ($this->isNoEmailFilter || $this->isScrapeOnly) {
      $this->emailFiltersFileName = null;
    }

    // Check that necessary files exist or can be created
    if ($this->isEmailOnly) {
      // The emails file should already exist or there is a problem
      $this->emailsFile = $this->openFile($this->emailsFileName);
    } else {
      // We are going to scrape, make sure the urls file exists
      $this->urlsFile = $this->openFile($this->urlsFileName);

      // Create an empty file for the raw emails output
      $this->emailsFile = $this->createFile($this->emailsFileName);
    }

    if (!$this->isScrapeOnly) {
      // Create the output file
      $this->outputFile = $this->createFile($this->outputFileName);
    }

    // Open the url filter file
    if ($this->urlFiltersFileName) {
      $this->urlFiltersFile = $this->openFile($this->urlFiltersFileName);
    }

    // Open the email filter file
    if ($this->emailFiltersFileName) {
      $this->emailFiltersFile = $this->openFile($this->emailFiltersFileName);
    }
  }

  /**
   * Helper to parse the command line
   *
   * @return void
   */
  protected function parseCommandLine() {
    $arg = 1;

    while ($arg < $this->argc) {
      $nextArg = $this->argv[$arg];

      // If just want help, then output usage and die
      if ($nextArg === '--help') {
        $this->displayhelp();
        $this->cleanupAndDie();
      }

      $increment = 1;

      if ($nextArg === '--verbose') {
        $this->isVerbose = true;
      } else if ($nextArg === '--scrape-only') {
        $this->isScrapeOnly = true;
      } else if ($nextArg === '--email-only') {
        $this->isEmailOnly = true;
      } else if ($nextArg === '--no-url-filter') {
        $this->isNoUrlFilter = true;
      } else if ($nextArg === '--no-email-filter') {
        $this->isNoEmailFilter = true;
      } else if ($nextArg === '--urls') {
        $this->urlsFileName = $this->argv[$arg + 1];
        $increment = 2;
      } else if ($nextArg === '--emails') {
        $this->emailsFileName = $this->argv[$arg + 1];
        $increment = 2;
      } else if ($nextArg === '--output') {
        $this->outputFileName = $this->argv[$arg + 1];
        $increment = 2;
      } else if ($nextArg === '--url-filters') {
        $this->urlFiltersFileName = $this->argv[$arg + 1];
        $increment = 2;
      } else if ($nextArg === '--email-filters') {
        $this->emailFiltersFileName = $this->argv[$arg + 1];
        $increment = 2;
      } else if ($nextArg === '--url-column') {
        $this->urlColumn = $this->argv[$arg + 1];
        $increment = 2;
      } else {
        print("\nError! Invalid param \"{$nextArg}\"\n");
        $this->displayHelp();
        $this->cleanupAndDie();
      }

      $arg += $increment;
    }
  }

  /**
   * Helper to display tool usage
   *
   * @return void
   */
  protected function displayHelp() {
    printLine();
    printLine("Usage for run_scrape:");
    printLine("  runscrape [0 or more of the below params, all are optional]");
    printLine();
    printLine("  --help                       - display the help");
    printLine("  --verbose                    - display extra logging information");
    printLine("  --scrape-only                - only do the scrape and output the emails csv file");
    printLine("  --email-only                 - only process the emails csv file and output the result");
    printLine("  --no-url-filter              - do not apply the urls filter");
    printLine("  --no-email-filter            - do not apply the email domains filter");
    printLine("  --no-dup-filter              - do not de-dup the emails in th the output file");
    printLine();
    printLine("  --urls <filepath>            - urls to process, defaults to {$this->urlsFileName}");
    printLine("  --emails <filepath>          - raw email list to process, defaults to {$this->emailsFileName}");
    printLine("  --output <filepath>          - output emails, defaults to {$this->outputFileName}");
    printLine("  --url-filters <filepath>     - url domains to filter out, defaults to {$this->urlFiltersFileName}");
    printLine("  --email-filters <filepath>   - email domains to filter out, defaults to {$this->emailFiltersFileName}");
    printLine("  --url-column <integer>       - defaults to column 1");
    printLine();
  }

  /***
   * Open a file without an error by first checking existence
   *
   * @param string $filepath
   * @return false|resource
   */
  protected function openFile($filepath) {
    $isFile = file_exists($filepath);
    if (!$isFile) {
      $this->logErrorLine("Could not open file: {$filepath}");
      $this->cleanupAndDie();
    }

    $file = fopen($filepath, 'r');
    if (!$file) {
      $this->logErrorLine("Could not open file: {$filepath}");
      $this->cleanupAndDie();
    }

    return $file;
  }

  /**
   * Create a file without an error by first checking existence
   *
   * @param $filepath
   * @return false|resource
   */
  protected function createFile($filepath) {
    $isFile = file_exists($filepath);
    if ($isFile) {
      $this->logErrorLine("File already exists: {$filepath}");
      $this->cleanupAndDie();
    }

    $file = fopen($filepath, 'x');
    if (!$file) {
      $this->logErrorLine("Could not create file: {$filepath}");
      $this->cleanupAndDie();
    }

    return $file;
  }

  /**
   * Cleanup any necessary items (such as open files) and then die
   *
   * @return void
   */
  protected function cleanupAndDie() {
    if ($this->outputFile) {
      fclose($this->outputFile);
    }

    if ($this->emailFiltersFile) {
      fclose($this->emailFiltersFile);
    }

    if ($this->emailsFile) {
      fclose($this->emailsFile);
    }

    if ($this->urlFiltersFile) {
      fclose($this->urlFiltersFile);
    }

    if ($this->urlsFile) {
      fclose($this->urlsFile);
    }

    die();
  }

  /***
   * Helper to log info if verbose is set
   *
   * @param string $text
   * @return void
   */
  protected function logLine($text) {
    if ($this->isVerbose) {
     printLine(date('h:i:s') . ': ' . $text);
    }
  }

  /***
   * Helper to log error info
   *
   * @param $text
   * @return void
   */
  protected function logErrorLine($text) {
    printLine(date('h:i:s') . ': [ERROR] - ' . $text);
  }

}
